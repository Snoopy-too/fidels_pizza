import React, { createContext, useContext, useState, ReactNode, useCallback } from 'react';
import type { Locale } from '../types';

// --- TRANSLATION DATA ---

const translations = {
    en: {
        currency: 'JPY',
        modal: {
            ok: 'OK',
            confirm: 'Confirm',
            cancel: 'Cancel',
        },
        header: {
            title: "Fidel's Pizza",
            home: 'Home',
            menu: 'Menu',
            myOrders: 'My Orders',
            admin: 'Admin',
            welcome: 'Welcome, {{name}}',
            logout: 'Logout',
            login: 'Login',
            register: 'Register',
        },
        footer: {
            copy: 'Â© {{year}} Fidel\'s Pizza. All rights reserved.',
            crafted: 'Crafted with passion in Tokyo.',
        },
        landingPage: {
            eventInfo: {
                date: 'Date',
                location: 'Location',
            },
            registerNow: 'Register Now',
            preOrder: 'View Menu & Pre-Order',
            pastEventsTitle: 'From Our Past Events',
        },
        registerPage: {
            title: 'Create Your Account',
            accessCodePrompt: 'Please enter the 4-digit access code for the event.',
            accessCodeLabel: 'Access Code',
            verifyCodeBtn: 'Verify Code',
            invalidCodeError: 'Invalid access code. Please try again.',
            codeVerifiedSuccess: 'Code verified! Please fill out your details.',
            fullNameLabel: 'Full Name',
            emailLabel: 'Email Address',
            passwordLabel: 'Password',
            simulationNotice: 'This is a simulation. Do not use a real password.',
            createAccountBtn: 'Create Account',
            successTitle: 'Registration Successful!',
            successMessage: 'Welcome! You can now proceed to the menu to place your order.',
            emailExistsError: 'An account with this email already exists.',
        },
        loginPage: {
            title: 'Welcome Back',
            emailLabel: 'Email',
            passwordLabel: 'Password',
            passwordHint: 'Hint: For mock users, the password is "password".',
            signInBtn: 'Sign In',
            invalidCredentialsError: 'Invalid email or password.',
            forgotPasswordLink: 'Forgot your password?',
        },
        forgotPassword: {
            title: 'Forgot Password',
            prompt: "Enter your email address and we'll send you a link to reset your password.",
            emailLabel: 'Email',
            sendBtn: 'Send Reset Link',
            sendingBtn: 'Sending...',
            backToLogin: 'Back to Login',
            noAccount: 'No account found with this email address.',
            resetLinkSentTitle: 'Reset Link Sent',
            resetLinkSentMessage: 'A password reset link has been sent to {{email}}. Please check your inbox. For this simulation, the link is: {{resetUrl}}',
            resetLinkSentSuccess: 'If an account exists for {{email}}, a password reset link has been sent.',
        },
        resetPassword: {
            title: 'Reset Your Password',
            prompt: 'Please enter your new password below.',
            newPassword: 'New Password',
            confirmPassword: 'Confirm New Password',
            resetBtn: 'Reset Password',
            resettingBtn: 'Resetting...',
            noToken: 'Invalid or missing reset token. Please request a new link.',
            passwordMismatch: "Passwords don't match. Please try again.",
            passwordLengthError: 'Password must be at least 6 characters long.',
            success: 'Your password has been reset successfully!',
            invalidToken: 'This password reset link is invalid or has expired.',
            requestNewLink: 'Request a new reset link',
            redirecting: ' Redirecting to login...',
        },
        menuPage: {
            title: 'Pizza Menu',
            addToOrderBtn: 'Add to Order',
            unavailableBtn: 'Unavailable',
            viewCartBtn: 'View My Order',
            loginRequiredTitle: 'Please Log In',
            loginRequiredMessage: 'You need to be logged in to place an order.',
            emptyCartTitle: 'Empty Order',
            emptyCartMessage: 'Your order is empty. Please add some pizzas first.',
            cart: {
                title: 'My Order',
                empty: 'Your order is empty.',
                total: 'Total:',
                clearBtn: 'Clear',
                placeOrderBtn: 'Place Order',
                updateOrderBtn: 'Update Order',
            },
        },
        myOrders: {
            title: 'My Orders',
            order: 'Order',
            placedOn: 'Placed on',
            pickupTime: 'Pickup Time:',
            unassigned: 'Unassigned',
            summaryTitle: 'Order Summary',
            total: 'Total:',
            updateOrderBtn: 'Update Items',
            cancelOrderBtn: 'Cancel Order',
            noOrders: "You haven't placed any orders yet.",
            confirmCancelTitle: 'Confirm Cancellation',
            confirmCancelMessage: 'Are you sure you want to cancel this order? This action cannot be undone.',
            editOrderTitle: 'Editing Order',
            emptyOrder: 'Your order is now empty.',
            saveChangesBtn: 'Save Changes',
            discardChangesBtn: 'Discard',
            confirmEmptyTitle: 'Empty Order',
            confirmEmptyMessage: 'You have removed all items from your order. This will cancel the order. Do you want to proceed?',
            confirmEmptyBtn: 'Yes, Cancel Order'
        },
        order: {
            placed: {
                title: 'Order Placed!',
                message: 'Your order #{{orderId}} has been successfully placed. A confirmation has been sent to {{email}}.',
            },
            updated: {
                title: 'Order Updated!',
                message: 'Your order #{{orderId}} has been successfully updated.',
            },
            cancelled: {
                title: 'Order Cancelled',
                message: 'Your order #{{orderId}} has been cancelled.',
            },
            status: {
                pending: 'Pending',
                completed: 'Completed',
                cancelled: 'Cancelled',
            },
        },
        profile: {
            title: 'My Profile',
            notAuthenticated: 'User not authenticated.',
            incorrectPassword: 'The current password you entered is incorrect.',
            updateSuccess: 'Profile updated successfully.',
            passwordMismatch: "The new passwords don't match.",
            noChanges: 'No changes to save.',
            saveBtn: 'Save Changes',
            accountDetails: {
                title: 'Account Details',
                name: 'Name',
                email: 'Email',
            },
            changePassword: {
                title: 'Change Password',
                current: 'Current Password',
                currentPlaceholder: 'Required to change password',
                new: 'New Password',
                newPlaceholder: 'Leave blank to keep current',
                confirm: 'Confirm New Password',
            },
        },
        admin: {
            dashboard: {
                title: 'Admin Dashboard',
                tabs: {
                    orders: 'Orders',
                    menu: 'Menu Management',
                    settings: 'Site Settings',
                    profile: 'My Profile',
                },
            },
            orders: {
                title: 'Order Management',
                filterPlaceholder: 'Filter by customer, order ID, or pizza...',
                selectedCount: '{{count}} order(s) selected.',
                setPickupTime: 'Set Pickup Time',
                applyBtn: 'Apply',
                notAvailable: 'N/A',
                viewAction: 'View/Edit',
                modalTitle: 'Order Details: #{{orderId}}',
                customerLabel: 'Customer:',
                itemsLabel: 'Items:',
                totalLabel: 'Total:',
                statusLabel: 'Status:',
                pickupTimeLabel: 'Pickup Time:',
                missingInfoTitle: 'Missing Information',
                missingInfoMessage: 'Please select a pickup time to apply.',
                bulkUpdateConfirmTitle: 'Confirm Bulk Update',
                bulkUpdateConfirmMessage: 'Are you sure you want to set the pickup time to {{pickupTime}} for {{count}} orders?',
                bulkUpdateSuccessTitle: 'Update Successful',
                bulkUpdateSuccessMessage: '{{count}} orders have been updated.',
                headers: {
                    id: 'ID',
                    customer: 'Customer',
                    items: 'Items',
                    total: 'Total',
                    pickupTime: 'Pickup',
                    date: 'Date',
                    status: 'Status',
                    actions: 'Actions',
                },
                productionSummary: {
                    title: 'Production Summary',
                    totalPizza: 'Total Pizzas Required',
                    pizzaType: 'Pizza',
                    total: 'Total',
                    byTime: 'Production by Time Slot',
                    time: 'Time',
                },
            },
            menu: {
                title: 'Menu Management',
                addNewBtn: 'Add New Item',
                statusLabel: 'Status:',
                available: 'Available',
                unavailable: 'Unavailable',
                editBtn: 'Edit',
                deleteBtn: 'Delete',
                confirmDeleteTitle: 'Confirm Deletion',
                confirmDeleteMessage: 'Are you sure you want to delete this menu item?',
                modal: {
                    editTitle: 'Edit Menu Item',
                    addTitle: 'Add New Menu Item',
                    namePlaceholder: 'Pizza Name',
                    descriptionPlaceholder: 'Description',
                    pricePlaceholder: 'Price',
                    imageUrlPlaceholder: 'Image URL',
                    availableLabel: 'Available for ordering',
                    saveBtn: 'Save Changes',
                    addBtn: 'Add Item',
                },
            },
            settings: {
                title: 'Site Settings',
                updateSuccessTitle: 'Success',
                eventUpdateSuccess: 'Event information updated successfully.',
                landingUpdateSuccess: 'Landing page content updated successfully.',
                codeUpdateSuccess: 'Access code updated successfully.',
                clearOrdersSuccessTitle: 'Orders Cleared',
                clearOrdersSuccessMessage: 'All orders have been successfully cleared from the system.',
                clearOrdersConfirmTitle: 'Confirm Clear All Orders',
                clearOrdersConfirmMessage: 'Are you sure you want to permanently delete ALL orders? This action cannot be undone.',
                eventDetails: {
                    title: 'Event Details',
                    date: 'Date',
                    address: 'Address',
                    saveBtn: 'Save Event Info',
                },
                landingContent: {
                    title: 'Landing Page Content',
                    pageTitle: 'Title',
                    description: 'Description',
                    imageUrls: 'Image URLs (comma-separated)',
                    saveBtn: 'Save Content',
                },
                accessCode: {
                    title: 'Registration Access Code',
                    code: '4-Digit Code',
                    saveBtn: 'Save Code',
                },
                dangerZone: {
                    title: 'Danger Zone',
                    description: 'These actions are destructive and cannot be undone. Please be certain.',
                    clearOrdersBtn: 'Clear All Orders',
                },
            },
        },
    },
    ja: {
        currency: 'å',
        modal: {
            ok: 'OK',
            confirm: 'ç¢ºèª',
            cancel: 'ã­ã£ã³ã»ã«',
        },
        header: {
            title: 'ãã£ãã«ã®ãã¶',
            home: 'ãã¼ã ',
            menu: 'ã¡ãã¥ã¼',
            myOrders: 'æ³¨æå±¥æ­´',
            admin: 'ç®¡ç',
            welcome: 'ããããã{{name}}ãã',
            logout: 'ã­ã°ã¢ã¦ã',
            login: 'ã­ã°ã¤ã³',
            register: 'ç»é²',
        },
        footer: {
            copy: 'Â© {{year}} ãã£ãã«ã®ãã¶. All rights reserved.',
            crafted: 'æ±äº¬ã§æç±ãè¾¼ãã¦ä½ããã¦ãã¾ãã',
        },
        landingPage: {
            eventInfo: {
                date: 'éå¬æ¥',
                location: 'å ´æ',
            },
            registerNow: 'ä»ããç»é²',
            preOrder: 'ã¡ãã¥ã¼ãè¦ãã»äºåæ³¨æ',
            pastEventsTitle: 'éå»ã®ã¤ãã³ããã',
        },
        registerPage: {
            title: 'ã¢ã«ã¦ã³ãä½æ',
            accessCodePrompt: 'ã¤ãã³ãç¨ã®4æ¡ã®ã¢ã¯ã»ã¹ã³ã¼ããå¥åãã¦ãã ããã',
            accessCodeLabel: 'ã¢ã¯ã»ã¹ã³ã¼ã',
            verifyCodeBtn: 'ã³ã¼ããèªè¨¼',
            invalidCodeError: 'ã¢ã¯ã»ã¹ã³ã¼ããç¡å¹ã§ããããä¸åº¦ãè©¦ããã ããã',
            codeVerifiedSuccess: 'ã³ã¼ããèªè¨¼ããã¾ããï¼è©³ç´°ãå¥åãã¦ãã ããã',
            fullNameLabel: 'æ°å',
            emailLabel: 'ã¡ã¼ã«ã¢ãã¬ã¹',
            passwordLabel: 'ãã¹ã¯ã¼ã',
            simulationNotice: 'ããã¯ã·ãã¥ã¬ã¼ã·ã§ã³ã§ããå®éã®ãã¹ã¯ã¼ãã¯ä½¿ç¨ããªãã§ãã ããã',
            createAccountBtn: 'ã¢ã«ã¦ã³ããä½æ',
            successTitle: 'ç»é²ãå®äºãã¾ããï¼',
            successMessage: 'ããããï¼ã¡ãã¥ã¼ã«é²ãã§æ³¨æãã¦ãã ããã',
            emailExistsError: 'ãã®ã¡ã¼ã«ã¢ãã¬ã¹ã¯æ¢ã«ç»é²ããã¦ãã¾ãã',
        },
        loginPage: {
            title: 'ãããããªãã',
            emailLabel: 'ã¡ã¼ã«ã¢ãã¬ã¹',
            passwordLabel: 'ãã¹ã¯ã¼ã',
            passwordHint: 'ãã³ãï¼ã¢ãã¯ã¦ã¼ã¶ã¼ã®ãã¹ã¯ã¼ãã¯ "password" ã§ãã',
            signInBtn: 'ãµã¤ã³ã¤ã³',
            invalidCredentialsError: 'ã¡ã¼ã«ã¢ãã¬ã¹ã¾ãã¯ãã¹ã¯ã¼ããç¡å¹ã§ãã',
            forgotPasswordLink: 'ãã¹ã¯ã¼ãããå¿ãã§ããï¼',
        },
        forgotPassword: {
            title: 'ãã¹ã¯ã¼ãããå¿ãã®å ´å',
            prompt: 'ã¡ã¼ã«ã¢ãã¬ã¹ãå¥åãã¦ãã ããããã¹ã¯ã¼ãåè¨­å®ç¨ã®ãªã³ã¯ããéããã¾ãã',
            emailLabel: 'ã¡ã¼ã«ã¢ãã¬ã¹',
            sendBtn: 'åè¨­å®ãªã³ã¯ãéä¿¡',
            sendingBtn: 'éä¿¡ä¸­...',
            backToLogin: 'ã­ã°ã¤ã³ã«æ»ã',
            noAccount: 'ãã®ã¡ã¼ã«ã¢ãã¬ã¹ã®ã¢ã«ã¦ã³ãã¯è¦ã¤ããã¾ããã§ããã',
            resetLinkSentTitle: 'åè¨­å®ãªã³ã¯ãéä¿¡ãã¾ãã',
            resetLinkSentMessage: 'ãã¹ã¯ã¼ãåè¨­å®ãªã³ã¯ã{{email}}ã«éä¿¡ãã¾ãããåä¿¡ãã¬ã¤ãç¢ºèªãã¦ãã ãããã·ãã¥ã¬ã¼ã·ã§ã³ã®ããããªã³ã¯ã¯ãã¡ãã§ãï¼{{resetUrl}}',
            resetLinkSentSuccess: '{{email}}ã®ã¢ã«ã¦ã³ããå­å¨ããå ´åããã¹ã¯ã¼ãåè¨­å®ãªã³ã¯ãéä¿¡ããã¾ããã',
        },
        resetPassword: {
            title: 'ãã¹ã¯ã¼ãããªã»ãã',
            prompt: 'æ°ãããã¹ã¯ã¼ããä»¥ä¸ã«å¥åãã¦ãã ããã',
            newPassword: 'æ°ãããã¹ã¯ã¼ã',
            confirmPassword: 'æ°ãããã¹ã¯ã¼ãï¼ç¢ºèªï¼',
            resetBtn: 'ãã¹ã¯ã¼ãããªã»ãã',
            resettingBtn: 'ãªã»ããä¸­...',
            noToken: 'åè¨­å®ãã¼ã¯ã³ãç¡å¹ã¾ãã¯è¦ã¤ããã¾ãããæ°ãããªã³ã¯ããªã¯ã¨ã¹ããã¦ãã ããã',
            passwordMismatch: 'ãã¹ã¯ã¼ããä¸è´ãã¾ãããããä¸åº¦ãè©¦ããã ããã',
            passwordLengthError: 'ãã¹ã¯ã¼ãã¯6æå­ä»¥ä¸ã§è¨­å®ãã¦ãã ããã',
            success: 'ãã¹ã¯ã¼ããæ­£å¸¸ã«ãªã»ããããã¾ããï¼',
            invalidToken: 'ãã®ãã¹ã¯ã¼ãåè¨­å®ãªã³ã¯ã¯ç¡å¹ããæå¹æéãåãã¦ãã¾ãã',
            requestNewLink: 'æ°ããåè¨­å®ãªã³ã¯ããªã¯ã¨ã¹ã',
            redirecting: ' ã­ã°ã¤ã³ç»é¢ã«ãªãã¤ã¬ã¯ããã¾ã...',
        },
        menuPage: {
            title: 'ãã¶ã¡ãã¥ã¼',
            addToOrderBtn: 'æ³¨æã«è¿½å ',
            unavailableBtn: 'ååã',
            viewCartBtn: 'æ³¨æãç¢ºèª',
            loginRequiredTitle: 'ã­ã°ã¤ã³ãã¦ãã ãã',
            loginRequiredMessage: 'æ³¨æããã«ã¯ã­ã°ã¤ã³ãå¿è¦ã§ãã',
            emptyCartTitle: 'æ³¨æãç©ºã§ã',
            emptyCartMessage: 'æ³¨æãç©ºã§ããåã«ãã¶ãè¿½å ãã¦ãã ããã',
            cart: {
                title: 'ãã¤ãªã¼ãã¼',
                empty: 'æ³¨æã¯ç©ºã§ãã',
                total: 'åè¨:',
                clearBtn: 'ã¯ãªã¢',
                placeOrderBtn: 'æ³¨æãç¢ºå®',
                updateOrderBtn: 'æ³¨æãæ´æ°',
            },
        },
        myOrders: {
            title: 'æ³¨æå±¥æ­´',
            order: 'æ³¨æ',
            placedOn: 'æ³¨ææ¥',
            pickupTime: 'ååæé:',
            unassigned: 'æªå®',
            summaryTitle: 'æ³¨ææ¦è¦',
            total: 'åè¨:',
            updateOrderBtn: 'ååãç·¨é',
            cancelOrderBtn: 'æ³¨æãã­ã£ã³ã»ã«',
            noOrders: 'ã¾ã æ³¨æãããã¾ããã',
            confirmCancelTitle: 'ã­ã£ã³ã»ã«ç¢ºèª',
            confirmCancelMessage: 'æ¬å½ã«ãã®æ³¨æãã­ã£ã³ã»ã«ãã¾ããï¼ãã®æä½ã¯åã«æ»ãã¾ããã',
            editOrderTitle: 'æ³¨æãç·¨éä¸­',
            emptyOrder: 'æ³¨æãç©ºã«ãªãã¾ããã',
            saveChangesBtn: 'å¤æ´ãä¿å­',
            discardChangesBtn: 'ç ´æ£',
            confirmEmptyTitle: 'æ³¨æãç©ºã§ã',
            confirmEmptyMessage: 'æ³¨æãããã¹ã¦ã®ååãåé¤ãã¾ãããããã«ããæ³¨æãã­ã£ã³ã»ã«ããã¾ããç¶è¡ãã¾ããï¼',
            confirmEmptyBtn: 'ã¯ããã­ã£ã³ã»ã«ãã¾ã'
        },
        order: {
            placed: {
                title: 'æ³¨æãå®äºãã¾ããï¼',
                message: 'æ³¨æçªå·#{{orderId}}ã®åä»ãå®äºãã¾ãããç¢ºèªã¡ã¼ã«ã{{email}}ã«ãéããã¾ããã',
            },
            updated: {
                title: 'æ³¨æãæ´æ°ããã¾ããï¼',
                message: 'æ³¨æçªå·#{{orderId}}ã¯æ­£å¸¸ã«æ´æ°ããã¾ããã',
            },
            cancelled: {
                title: 'æ³¨æãã­ã£ã³ã»ã«ããã¾ãã',
                message: 'æ³¨æçªå·#{{orderId}}ã¯ã­ã£ã³ã»ã«ããã¾ããã',

            },
            status: {
                pending: 'æºåä¸­',
                completed: 'å®äº',
                cancelled: 'ã­ã£ã³ã»ã«æ¸',
            },
        },
        profile: {
            title: 'ãã¤ãã­ãã£ã¼ã«',
            notAuthenticated: 'ã¦ã¼ã¶ã¼ãèªè¨¼ããã¦ãã¾ããã',
            incorrectPassword: 'ç¾å¨ã®ãã¹ã¯ã¼ããééã£ã¦ãã¾ãã',
            updateSuccess: 'ãã­ãã£ã¼ã«ãæ­£å¸¸ã«æ´æ°ããã¾ããã',
            passwordMismatch: 'æ°ãããã¹ã¯ã¼ããä¸è´ãã¾ããã',
            noChanges: 'ä¿å­ããå¤æ´ãããã¾ããã',
            saveBtn: 'å¤æ´ãä¿å­',
            accountDetails: {
                title: 'ã¢ã«ã¦ã³ãè©³ç´°',
                name: 'åå',
                email: 'ã¡ã¼ã«ã¢ãã¬ã¹',
            },
            changePassword: {
                title: 'ãã¹ã¯ã¼ãå¤æ´',
                current: 'ç¾å¨ã®ãã¹ã¯ã¼ã',
                currentPlaceholder: 'ãã¹ã¯ã¼ãå¤æ´ã«å¿è¦ã§ã',
                new: 'æ°ãããã¹ã¯ã¼ã',
                newPlaceholder: 'å¤æ´ããªãå ´åã¯ç©ºæ¬',
                confirm: 'æ°ãããã¹ã¯ã¼ãï¼ç¢ºèªï¼',
            },
        },
        admin: {
            dashboard: {
                title: 'ç®¡çèããã·ã¥ãã¼ã',
                tabs: {
                    orders: 'æ³¨æç®¡ç',
                    menu: 'ã¡ãã¥ã¼ç®¡ç',
                    settings: 'ãµã¤ãè¨­å®',
                    profile: 'ãã¤ãã­ãã£ã¼ã«',
                },
            },
            orders: {
                title: 'æ³¨æç®¡ç',
                filterPlaceholder: 'é¡§å®¢åãæ³¨æIDããã¶åã§çµãè¾¼ã¿...',
                selectedCount: '{{count}}ä»¶ã®æ³¨æãé¸æä¸­',
                setPickupTime: 'ååæéãè¨­å®',
                applyBtn: 'é©ç¨',
                notAvailable: 'æªè¨­å®',
                viewAction: 'è¡¨ç¤º/ç·¨é',
                modalTitle: 'æ³¨æè©³ç´°: #{{orderId}}',
                customerLabel: 'é¡§å®¢:',
                itemsLabel: 'åå:',
                totalLabel: 'åè¨:',
                statusLabel: 'ã¹ãã¼ã¿ã¹:',
                pickupTimeLabel: 'ååæé:',
                missingInfoTitle: 'æå ±ãä¸è¶³ãã¦ãã¾ã',
                missingInfoMessage: 'é©ç¨ããååæéãé¸æãã¦ãã ããã',
                bulkUpdateConfirmTitle: 'ä¸æ¬æ´æ°ã®ç¢ºèª',
                bulkUpdateConfirmMessage: '{{count}}ä»¶ã®æ³¨æã®ååæéã{{pickupTime}}ã«è¨­å®ãã¾ããï¼',
                bulkUpdateSuccessTitle: 'æ´æ°æå',
                bulkUpdateSuccessMessage: '{{count}}ä»¶ã®æ³¨æãæ´æ°ããã¾ããã',
                headers: {
                    id: 'ID',
                    customer: 'é¡§å®¢',
                    items: 'åæ°',
                    total: 'åè¨',
                    pickupTime: 'åå',
                    date: 'æ¥ä»',
                    status: 'ã¹ãã¼ã¿ã¹',
                    actions: 'æä½',
                },
                productionSummary: {
                    title: 'çç£ãµããªã¼',
                    totalPizza: 'å¿è¦ãªãã¶ã®ç·æ°',
                    pizzaType: 'ãã¶',
                    total: 'åè¨',
                    byTime: 'æéå¸¯å¥çç£æ°',
                    time: 'æé',
                },
            },
            menu: {
                title: 'ã¡ãã¥ã¼ç®¡ç',
                addNewBtn: 'æ°è¦è¿½å ',
                statusLabel: 'ç¶æ:',
                available: 'æä¾ä¸­',
                unavailable: 'ååã',
                editBtn: 'ç·¨é',
                deleteBtn: 'åé¤',
                confirmDeleteTitle: 'åé¤ã®ç¢ºèª',
                confirmDeleteMessage: 'ãã®ã¡ãã¥ã¼é ç®ãæ¬å½ã«åé¤ãã¾ããï¼',
                modal: {
                    editTitle: 'ã¡ãã¥ã¼é ç®ãç·¨é',
                    addTitle: 'æ°ããã¡ãã¥ã¼é ç®ãè¿½å ',
                    namePlaceholder: 'ãã¶ã®åå',
                    descriptionPlaceholder: 'èª¬æ',
                    pricePlaceholder: 'ä¾¡æ ¼',
                    imageUrlPlaceholder: 'ç»åURL',
                    availableLabel: 'æ³¨æå¯è½ã«ãã',
                    saveBtn: 'å¤æ´ãä¿å­',
                    addBtn: 'é ç®ãè¿½å ',
                },
            },
            settings: {
                title: 'ãµã¤ãè¨­å®',
                updateSuccessTitle: 'æå',
                eventUpdateSuccess: 'ã¤ãã³ãæå ±ãæ­£å¸¸ã«æ´æ°ããã¾ããã',
                landingUpdateSuccess: 'ã©ã³ãã£ã³ã°ãã¼ã¸ã®åå®¹ãæ­£å¸¸ã«æ´æ°ããã¾ããã',
                codeUpdateSuccess: 'ã¢ã¯ã»ã¹ã³ã¼ããæ­£å¸¸ã«æ´æ°ããã¾ããã',
                clearOrdersSuccessTitle: 'æ³¨æãåé¤ãã¾ãã',
                clearOrdersSuccessMessage: 'ãã¹ã¦ã®æ³¨æãã·ã¹ãã ããæ­£å¸¸ã«åé¤ããã¾ããã',
                clearOrdersConfirmTitle: 'ãã¹ã¦ã®æ³¨æã®åé¤ãç¢ºèª',
                clearOrdersConfirmMessage: 'æ¬å½ã«ãã¹ã¦ã®æ³¨æãå®å¨ã«åé¤ãã¾ããï¼ãã®æä½ã¯åã«æ»ãã¾ããã',
                eventDetails: {
                    title: 'ã¤ãã³ãè©³ç´°',
                    date: 'æ¥ä»',
                    address: 'ä½æ',
                    saveBtn: 'ã¤ãã³ãæå ±ãä¿å­',
                },
                landingContent: {
                    title: 'ã©ã³ãã£ã³ã°ãã¼ã¸ã®åå®¹',
                    pageTitle: 'ã¿ã¤ãã«',
                    description: 'èª¬æ',
                    imageUrls: 'ç»åURLï¼ã«ã³ãåºåãï¼',
                    saveBtn: 'åå®¹ãä¿å­',
                },
                accessCode: {
                    title: 'ç»é²ã¢ã¯ã»ã¹ã³ã¼ã',
                    code: '4æ¡ã®ã³ã¼ã',
                    saveBtn: 'ã³ã¼ããä¿å­',
                },
                dangerZone: {
                    title: 'å±éºã¾ã¼ã³',
                    description: 'ãããã®æä½ã¯ç ´å£çã§ãããåã«æ»ããã¨ã¯ã§ãã¾ãããååã«ç¢ºèªãã¦ãã ããã',
                    clearOrdersBtn: 'ãã¹ã¦ã®æ³¨æãåé¤',
                },
            },
        },
    }
};

// --- CONTEXT SETUP ---

interface LocaleContextType {
    locale: Locale;
    setLocale: (locale: Locale) => void;
    t: (key: string, replacements?: { [key: string]: string | number }) => string;
}

const LocaleContext = createContext<LocaleContextType | undefined>(undefined);

export const LocaleProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
    const [locale, setLocale] = useState<Locale>('en');

    const t = useCallback((key: string, replacements?: { [key: string]: string | number }) => {
        const lang = translations[locale] as any;
        // Access nested properties using dot notation
        let text = key.split('.').reduce((obj, k) => obj && obj[k], lang);

        if (typeof text !== 'string') {
            console.warn(`Translation not found or not a string for key: ${key}`);
            return key; // Return the key itself as a fallback
        }
        
        if (replacements) {
            Object.keys(replacements).forEach(placeholder => {
                const regex = new RegExp(`{{${placeholder}}}`, 'g');
                text = text.replace(regex, String(replacements[placeholder]));
            });
        }

        return text;
    }, [locale]);

    const value = { locale, setLocale, t };

    return (
        <LocaleContext.Provider value={value}>
            {children}
        </LocaleContext.Provider>
    );
};

export const useLocale = () => {
    const context = useContext(LocaleContext);
    if (context === undefined) {
        throw new Error('useLocale must be used within a LocaleProvider');
    }
    return context;
};
